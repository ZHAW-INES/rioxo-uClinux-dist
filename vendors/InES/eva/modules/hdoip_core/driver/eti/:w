
#include "eti_drv.h"


/** Start FSM
 *
 */
int eti_drv_start(t_eti* handle)
{
    eti_set_cpu_filter_mask(handle->ptr, ETI_CPU_FILTER_MASK);
	eti_set_config_start(handle->ptr);
    
	return ERR_ETI_SUCCESS;
}

/** Stop FSM
 *
 */
int eti_drv_stop(t_eti* handle)
{
    eti_set_cpu_filter_mask(handle->ptr, ETI_DIS_FILTER_MASK);
	eti_set_config_stop(handle->ptr);

	return ERR_ETI_SUCCESS;
}

/** Starts audio ringbuffer
 *
 * @param handle pointer to the eti handle
 * @return error code
 */
int eti_drv_start_aud(t_eti* handle)
{
    eti_set_aud_filter_mask(handle->ptr, ETI_AUD_FILTER_MASK);

    return ERR_ETI_SUCCESS;
}

/** Stops audio ringbuffer
 *
 * @param handle pointer to the eti handle
 * @return error code
 */
int eti_drv_stop_aud(t_eti* handle)
{
    eti_set_aud_filter_mask(handle->ptr, ETI_DIS_FILTER_MASK);
    return ERR_ETI_SUCCESS;
}

/** Starts video ringbuffer
 *
 * @param handle pointer to the eti handle
 * @return error code
 */
int eti_drv_start_vid(t_eti* handle)
{
    eti_set_vid_filter_mask(handle->ptr, ETI_VID_FILTER_MASK);

    return ERR_ETI_SUCCESS;
}

/** Stops video ringbuffer
 *
 * @param handle pointer to the eti handle
 * @return error code
 */
int eti_drv_stop_vid(t_eti* handle)
{
    eti_set_vid_filter_mask(handle->ptr, ETI_DIS_FILTER_MASK);
    return ERR_ETI_SUCCESS;
}

/** Initialize CPU ringbuffer
 *
 * @param handle pointer to the eti handle
 * @param start_ptr start address of the buffer
 * @param size size of the buffer
 * @return error code
 */
int eti_drv_set_cpu_buf(t_eti* handle, void* start_ptr, size_t size)
{
    t_rbf_dsc dsc;

    rbf_dsc(&dsc, start_ptr, size);
    eti_set_cpu_desc(handle->ptr, &dsc);

    return ERR_ETI_SUCCESS;
}

/** Initialize audio ringbuffer
 *
 * @param handle pointer to the eti handle
 * @param start_ptr start address of the buffer
 * @param size size of the buffer
 * @return error code
 */
int eti_drv_set_aud_buf(t_eti* handle, void* start_ptr, size_t size)
{
    t_rbf_dsc dsc;

    rbf_dsc(&dsc, start_ptr, size);
    eti_set_aud_desc(handle->ptr, &dsc);

    return ERR_ETI_SUCCESS;
}

/** Initialize video ringbuffer
 *
 * @param handle pointer to the eti handle
 * @param start_ptr start address of the buffer
 * @param size size of the buffer
 * @return error code
 */
int eti_drv_set_vid_buf(t_eti* handle, void* start_ptr, size_t size)
{
    t_rbf_dsc dsc;

    rbf_dsc(&dsc, start_ptr, size);
    eti_set_vid_desc(handle->ptr, &dsc);

    return ERR_ETI_SUCCESS;
}

/** Set the audio & video filter parameters 
 *
 * @param handle pointer to the eti handle
 * @param dev_ip device ip
 * @param aud_src_ip audio source ip
 * @param vid_src_ip video source ip
 * @oaram aud_port audio udp port
 * @param vid_port video udp port
 * @return error code
 */
int eti_drv_set_filter(t_eti* handle, uint32_t dev_ip, uint32_t aud_src_ip, uint32_t vid_src_ip, uint16_t aud_port, uint16_t vid_port)
{
    eti_set_device_ip(handle->ptr, dev_ip);
    eti_set_vid_src_ip(handle->ptr, vid_src_ip);
    eti_set_aud_src_ip(handle->ptr, aud_src_ip);
    eti_set_aud_dst_udp_port(handle->ptr, aud_port);
    eti_set_vid_dst_udp_port(handle->ptr, vid_port);

    return ERR_ETI_SUCCESS;
}

/** Initialize encryption
 *
 */
int eti_drv_set_aes(t_eti* handle)
{
	eti_set_aes_session_key_0(handle->ptr, AES_KEY_0);
	eti_set_aes_session_key_1(handle->ptr, AES_KEY_1);
	eti_set_aes_session_key_2(handle->ptr, AES_KEY_2);
	eti_set_aes_session_key_3(handle->ptr, AES_KEY_3);
	eti_set_aes_riv_0(handle->ptr, AES_KEY_0);
	eti_set_aes_riv_1(handle->ptr, AES_KEY_1);

	return ERR_ETI_SUCCESS;
}

/** Sets the pointer to the acb registers
 *
 * @param handle pointer to the eti handle
 * @param ptr pointer to the acb registers
 * @return error code
 */
int eti_drv_set_ptr(t_eti* handle, void* ptr)
{
    handle->ptr = ptr;
    return ERR_ETI_SUCCESS;
}

/** Initialize ETI core driver
 *
 */
int eti_drv_init(t_eti* handle, void* ptr)
{
	REPORT(INFO, "+--------------------------------------------------+");
	REPORT(INFO, "| ETI-Driver: Initialize ethernet stream in        |");
	REPORT(INFO, "+--------------------------------------------------+");

    handle->ptr = ptr;

	eti_drv_stop(handle->ptr);
    eti_clr_irq1(handle->ptr);
	eti_drv_set_aes(handle->ptr);

	eti_set_burst_size_reg(handle->ptr, ETI_DMA_BURST_SIZE);
	eti_set_config_audio_enc_en(handle->ptr);
	eti_set_config_video_enc_en(handle->ptr);

	eti_set_cpu_filter_mask(handle->ptr, ETI_CPU_FILTER_MASK);
	eti_set_vid_filter_mask(handle->ptr, ETI_VID_FILTER_MASK);
	eti_set_aud_filter_mask(handle->ptr, ETI_AUD_FILTER_MASK);

    REPORT(INFO, "config reg : %08x", eti_get_config_reg(handle->ptr));
    REPORT(INFO, "status reg : %08x", eti_get_status_reg(handle->ptr));
    REPORT(INFO, "burst size : %d", eti_get_burst_size_reg(handle->ptr));

	return ERR_ETI_SUCCESS;
}


//TODO
//int eti_drv_handler(t_eso* handle, t_queue* event_queue)
